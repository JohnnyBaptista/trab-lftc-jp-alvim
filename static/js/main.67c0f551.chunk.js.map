{"version":3,"sources":["components/pages/Home.js","components/pages/Regex.js","components/pages/Gramatica.js","components/pages/AutoFin.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","redirectFlag","setRedirectFlag","Container","maxWidth","style","styles","container","text","to","renderRedirect","menu","button","onClick","height","display","justifyContent","alignItems","flexDirection","width","fontSize","textAlign","fontStyle","Regex","userInput","setUserInput","inputs","setInputs","validate","e","regex","RegExp","string","target","value","exec","borderColor","header","Tooltip","title","color","main","type","onChange","input","Divider","padding","alignSelf","map","item","placeholder","footer","length","slice","helper","HtmlTooltip","placement","Fragment","Typography","withStyles","theme","tooltip","backgroundColor","typography","pxToRem","border","borderWidth","borderStyle","borderRadius","outline","transitionDuration","marginRight","margin","paddingBottom","flexFlow","flexWrap","GrammarInput","leftSide","rightSide","TableRow","borderBottom","TableCell","borderRight","toUpperCase","maxLength","StringInput","setValue","TextField","variant","label","Gramatica","grammarInputs","setGrammarInputs","stringInputs","setStringInputs","str","arr","temp","replace","split","res","forEach","row","rule","push","i","filter","s","matchD","console","log","matchE","nextRule","toLowerCase","rules","find","r","innerContainer","TableContainer","Table","table","TableHead","TableBody","renderInputs","td","grammarInput","paddingTop","AutoFin","id","symbolType","nodes","setNodes","source","transitions","setTransitions","transitionInput","setTransitionInput","deleteMode","setDeleteMode","parseInt","paddingLeft","tr","t","data","links","config","nodeHighlightBehavior","linkHighlightBehavior","directed","maxZoom","node","size","highlightStrokeColor","labelPosition","link","highlightColor","renderLabel","onClickNode","nodeId","onClickLink","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67c0f551.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Button from '@material-ui/core/Button/Button';\nimport Container from '@material-ui/core/Container';\n\nexport default function Home() {\n\n    const [redirectFlag, setRedirectFlag] = useState(null);\n\n    const renderRedirect = () => {\n        if(redirectFlag){\n            return <Redirect to={`/${redirectFlag}`} />\n        }\n    }\n\n    return (\n        <Container maxWidth='sm' style={styles.container}>\n            <p style={styles.text}>\n                Trabalho: Linguagens Formais e Teoria da Computação \n            </p>\n            {renderRedirect()}\n            <div style={styles.menu}>\n                <Button style={styles.button} onClick={() => setRedirectFlag('regex')}>Expressões regulares</Button>\n                <Button style={styles.button}>Gramáticas</Button>\n                <Button style={styles.button} onClick={() => setRedirectFlag('autofin')}>Autômatos finitos</Button>\n            </div>\n            <p style={styles.text}>\n                Desenvolvido por: Giovanna Carreira Marinho e Guilherme Molina de Olyveira\n            </p>\n        </Container>\n    )\n}\n\nconst styles = {\n    container: {\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n    },\n    menu: {\n        height: '70%',\n        width: '50%',\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'center',\n        flexDirection: 'column'\n    },\n    text: {\n        fontSize: '15px',\n        textAlign: 'center'\n    },\n    button: {\n        fontSize: '20px',\n        fontStyle: 'none'\n    }\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button/Button';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\n\nimport RemoveOutlinedIcon from '@material-ui/icons/RemoveOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nexport default function Regex() {\n    const [userInput, setUserInput] = useState('');\n    const [correct, setCorrect] = useState(false);\n    const [inputs, setInputs] = useState([1]);\n\n    const validate = e => {\n        const regex = new RegExp(userInput);\n        const string = e.target.value;        \n                \n        if(regex.exec(string)){\n             e.target.style.borderColor = \"ForestGreen\";\n        } else {\n             e.target.style.borderColor = \"FireBrick\";\n        }\n    }\n\n    return (\n        <Container maxWidth='sm' style={styles.container}>\n            <header style={styles.header}>\n                <Link style={styles.button} to=\"/\" width=\"20px\" height=\"40px\">\n                    <Tooltip title=\"Voltar\"><Button style={styles.button}><ArrowBackIcon color=\"action\"/></Button></Tooltip>\n                </Link>\n                \n                <p style={styles.text}>Expressão regular</p>\n            </header>\n\n            <div style={styles.main}>\n                <input type=\"text\" onChange={(e) => setUserInput(e.target.value)} style={styles.input}/>\n            </div>\n\n            <Divider color=\"inherit\" style={{ padding: '0.5px', width: '95%', alignSelf: 'center' }} />\n\n            <div style={styles.main}>\n                {inputs.map(() => (\n                    <div style={styles.item}>\n                        <input type=\"text\" placeholder=\"String\" onChange={(e) => validate(e)} onClick={(e) => {validate(e); e.target.placeholder = \"\";}} style={styles.input}/>\n                    </div>\n                ))}\n            </div>\n\n            <div style={styles.footer}>\n                <Tooltip title=\"Adicionar\">\n                    <Button style={styles.button} onClick={() => {\n                        if(inputs.length < 10)\n                            setInputs([...inputs, 1])\n                        }} > <AddOutlinedIcon color=\"action\"/> </Button >\n                </Tooltip>\n                <Tooltip title=\"Remover\">\n                    <Button style={styles.button} onClick={() => {\n                        if(inputs.length > 1)\n                            setInputs(inputs.slice(0, inputs.length-1))\n                        }} > <RemoveOutlinedIcon color=\"action\" /> </Button >\n                </Tooltip>\n            </div>\n\n            <div style={styles.helper}>            \n                <HtmlTooltip placement=\"top\"\n                    title={\n                    <React.Fragment>\n                        <Typography  color=\"inherit\">Expressão regular</Typography>\n                        {'Insira a expressão regular:'} <br/>\n                        <b>{'  ^'}</b> {' iniciar a expressão regular'} <br/>\n                        <b>{'  $'}</b> {' termina a expressão regular'} <br/>\n                        <b>{'  *'}</b> {' zero ou mais repetições'} <br/>\n                        <b>{'  +'}</b> {' uma ou mais repetições'} <br/>\n                        <b>{'  ?'}</b> {' zero ou uma repetição'} <br/>\n                        <b>{'  |'}</b> {' união'} <br/>\n                        <b>{'  {x}'}</b> {' x repetições'} <br/>\n                        <b>{'  {x, y}'}</b> {' entre x e y repetições'} <br/><br/>\n                        {'Acrescente as strings para testar.'}                        \n                    </React.Fragment>\n                    }>\n                    <HelpOutlineIcon color=\"action\" />\n                </HtmlTooltip>\n            </div>    \n        </Container>\n    )\n}\n\nconst HtmlTooltip = withStyles((theme) => ({\n    tooltip: {\n      backgroundColor: '#f5f5f9',\n      color: 'rgba(0, 0, 0, 0.87)',\n      maxWidth: 420,\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #dadde9',\n    },\n  }))(Tooltip);\n\nconst styles = {\n    container: {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    input: {\n        borderWidth: \"3px\", \n        borderColor: \"black\",\n        borderStyle: \"solid\",\n        borderRadius: \"5px\",\n        height: \"50px\",\n        width: \"250px\",\n        outline: \"0\",\n        fontSize: \"20px\"\n     },\n    button: {\n        borderRadius: '5px',\n        height: '30px',\n        width: '20px',\n        transitionDuration: '0.5s',\n        marginRight: '10px'\n    },\n    text: {\n        fontSize: '30px',\n        textAlign: 'center',\n        margin: '0'\n    },\n    header:\n    {\n        paddingBottom: '15px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    main: {\n        paddingBottom: '20px',\n        margin: '0 auto',\n        display: 'flex',\n        flexFlow: 'row',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n    },\n    item: {\n        padding: '5px',\n    },\n    footer: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    helper: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        marginRight: '10px'\n    }\n}","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container/Container';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TextField from '@material-ui/core/TextField';\n\nconst GrammarInput = ({ leftSide, rightSide }) => {\n\n    const [inputs, setInputs] = useState([leftSide, rightSide]);\n\n    return (\n        <TableRow style={{ borderBottom: '2px solid black', height: '80px' }}>\n            <TableCell style={{ borderRight: '1px solid black', width: '10%' }}>\n                <input \n                    value={inputs[0]}\n                    style={{ backgroundColor: '#DFDBDB', border: 0, outline: 'none', width: '100%', fontSize: 20, textAlign: 'center' }}\n                    onChange={e => setInputs([ e.target.value.toUpperCase(), inputs[1] ])}\n                    maxLength={1}\n                />\n            </TableCell>\n            <TableCell style={{ borderRight: '1px solid black', width: '10%' }}>\n                >\n            </TableCell>\n            <TableCell style={{ width: '80%' }}>\n                <input \n                    value={inputs[1]}\n                    style={{ backgroundColor: '#DFDBDB', border: 0, outline: 'none', width: '100%', fontSize: 20 }}\n                    onChange={e => setInputs([ inputs[0], e.target.value ])}\n                />\n            </TableCell>\n        </TableRow>\n    )\n\n}\n\nconst StringInput = ({ validate }) => {\n    const [value, setValue] = useState('');\n\n    return (\n        <TextField\n            variant='filled'\n            label='Input:' \n            value={value}\n            onChange={e => setValue(e.target.value)}\n            style={{ width: '50%', }}\n            color={validate(value) ? 'primary' : 'secondary'}\n        />\n    )\n}\n\nexport default function Gramatica() {\n\n    const [grammarInputs, setGrammarInputs] = useState([\n        { leftSide: 'S', rightSide: 'a | bc | baaA' },\n        { leftSide: 'A', rightSide: 'aA | bB' },\n        { leftSide: 'B', rightSide: 'c' },\n        { leftSide: '', rightSide: '' }\n    ]);\n    const [stringInputs, setStringInputs] = useState(1);\n\n    const validate = str => {\n        const arr = grammarInputs.map(input => {\n            const temp = { ...input };\n            temp.rightSide = temp.rightSide.replace(/\\s+/g, '').split('|');\n            return temp;\n        });\n        const res = [];\n        let type = '';\n        arr.forEach(row => {\n            row.rightSide.forEach(rule => {\n                if(rule.replace(/[^A-Z]/g, '').length > 1){\n                    res.push('Invalid');\n                } else {\n                    for(let i=0; i<rule.length; i++){\n                        if(rule[i] === rule[i].toUpperCase() && i === 0){\n                            res.push('Left');\n                            break;\n                        }\n                        if(rule[i] === rule[i].toUpperCase() && i === rule.length - 1){\n                            res.push('Right');\n                            break;\n                        }\n                    }\n                }\n            })\n        });\n        if(res.filter(s => s !== 'Right').length === 0){\n            type = 'Right';\n        } else if(res.filter(s => s !== 'Left').length === 0){\n            type = 'Left';\n        } else {\n            type = 'Invalid';\n        };\n\n        if(type === 'Right'){\n            arr[0].rightSide.forEach(rule => {\n                if(matchD(str, rule, arr)){\n                    console.log('oi');\n                    return true;\n                };\n            });\n            return false;\n        } else if(type === 'Left'){\n            arr[0].rightSide.forEach(rule => {\n                if(matchE(str, rule, arr)){\n                    return true;\n                };\n            });\n            return false;\n        } else {\n            return false;\n        }\n\n    };\n\n    const matchD = (str, rule, arr) => {\n        if(rule.length - 1 > str.length) return false;\n        const nextRule = rule[rule.length - 1];\n        console.log(rule === str);\n        if(nextRule === nextRule.toLowerCase()) return rule === str;\n        const rules = arr.find(row => row.leftSide === nextRule);\n        if(!rules) return false;\n        rules.rightSide.forEach(r => {\n            if(matchD(str, rule.replace(nextRule, r), arr)){\n                return true;\n            }\n        });\n    };\n\n    const matchE = (str, rule, arr) => {\n        if(rule.length - 1 > str.length) return false;\n        const nextRule = rule[0];\n        if(nextRule === nextRule.toLowerCase()) return rule === str;\n        const rules = arr.find(row => row.leftSide === nextRule);\n        if(!rules) return false;\n        rules.rightSide.forEach(r => {\n            if(matchE(str, rule.replace(nextRule, r), arr)){\n                return true;\n            }\n        })\n    }\n\n    const renderInputs = () => {\n        let arr = [];\n        for(let i=0; i<stringInputs; i++){\n            arr.push(<StringInput validate={validate} />);\n        }\n        return arr;\n    }\n    return (\n        <Container maxWidth='lg' style={styles.container}>\n            <div style={{ ...styles.innerContainer }}>\n                <button\n                    onClick={() => setGrammarInputs([ ...grammarInputs, { leftSide: '', rightSide: '' } ])}\n                >add more</button>\n                <TableContainer style={{ height: '75%', width: '75%' }}>\n                    <Table style={styles.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    LHS\n                                </TableCell>\n                                <TableCell>\n\n                                </TableCell>\n                                <TableCell>\n                                    RHS\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {grammarInputs.map(input => (\n                                <GrammarInput leftSide={input.leftSide} rightSide={input.rightSide} />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            <div style={styles.innerContainer}>\n                <div style={{ height: '75%', width: '75%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n                    {renderInputs()}\n                </div>\n                <button\n                    onClick={() => {\n                        if(stringInputs < 10){\n                            setStringInputs(stringInputs + 2);\n                        }\n                    }}\n                >add more</button>\n            </div>\n        </Container>\n    )\n}\n\nconst styles = {\n    container: {\n        height: '100vh',\n        display: 'flex'\n    },\n    innerContainer: {\n        width: '50%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    table: {\n        height: '100%',\n        width: '100%',\n        backgroundColor: '#DFDBDB',\n        borderRadius: 5\n    },\n    td: {\n        height: '100%',\n        borderBottom: '1px solid black'\n    },\n    grammarInput: {\n        height: '25%',\n        width: '50%',\n        border: 0,\n        backgroundColor: '#DFDBDB',\n        outline: 'none'\n    }\n}","import React, { useState } from 'react';\nimport { Graph } from 'react-d3-graph';\nimport Button from '@material-ui/core/Button/Button';\nimport Delete from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\n\nimport RemoveOutlinedIcon from '@material-ui/icons/RemoveOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\n\nconst StringInput = () => {\n    return (\n        <input \n            style={{...styles.input, paddingTop: '5px'}}\n        />\n    )\n}\n\nexport default function AutoFin() {\n\n    const [nodes, setNodes] = useState([\n        { id: 'q0', symbolType: 'diamond' },\n        { id: 'q1', color: 'red' },\n    ]);\n    const [transitions, setTransitions] = useState([\n        { source: 'q0', target: 'q0', label: 'a' },\n        { source: 'q1', target: 'q1', label: 'b' },\n    ]);\n    const [transitionInput, setTransitionInput] = useState({ source: '', target: '', label: 'λ' });\n    const [stringInput, setStringInput] = useState('');\n    const [deleteMode, setDeleteMode] = useState(false);\n    const [inputs, setInputs] = useState(1);\n\n    const myConfig = {\n        nodeHighlightBehavior: true,\n        linkHighlightBehavior: true,\n        directed: true,\n        maxZoom: 7,\n        width: 800,\n        node: {\n          color: \"black\",\n          size: 120,\n          highlightStrokeColor: \"blue\",\n          labelPosition: 'top'\n        },\n        link: {\n          highlightColor: \"lightblue\",\n          renderLabel: true\n        },\n      };\n\n    const onClickNode = nodeId => {\n        if(deleteMode){\n            setTransitions(transitions.filter(t => t.source !== nodeId && t.target !== nodeId));\n            setNodes(nodes.filter(node => node.id !== nodeId));\n        } else {\n            setNodes(nodes.map(node => {\n                if(node.id === nodeId){\n                    if(node.color === 'red') node.color = 'black';\n                    else node.color = 'red';\n                };\n                return node;\n            }))\n        }\n    };\n      \n    const onClickLink = (source, target) => {\n        if(deleteMode) setTransitions(transitions.filter(t => t.source !== source || t.target !== target));\n        else setTransitionInput({ source, target, label: transitions.find(t => t.source === source && t.target === target).label });\n    };\n\n    const renderInputs = () => {\n        const arr = [];\n        for(let i=0; i<inputs; i++){\n            arr.push(<StringInput />);\n        }\n        return arr;\n    }\n\n    const validate = str => {\n        let charCode = 65;\n        const tempTransitions = [...transitions];\n        let tempNodes = [ ...nodes ];\n        tempNodes = tempNodes.map(node => {\n            const newValue = String.fromCharCode(charCode);\n            tempTransitions.map(tr => {\n                if(tr.source === node.id) tr.source = newValue;\n                if(tr.target === node.id) tr.target = newValue;\n            });\n            node.id = newValue;\n            let type = [];\n            if(node.symbolType === 'diamond') type.push('initial');\n            if(node.color === 'red') type.push('final');\n            node.type = type;\n            charCode += 1;\n            return node;\n        });\n        let grammar = [];\n        for(let i=0 ; i<transitions.length ; i++){\n            let initial = transitions[i].source;\n            let final = transitions[i].target;\n            let value = transitions[i].label;\n\n            let rules = grammar.find(row => row.leftSide === initial); \n\n            if(!rules){\n                if(value === 'λ') grammar.push({leftSide: initial, rightSide: [final]});\n                else grammar.push({leftSide: initial, rightSide: [value + final]});\n            }\n            else {\n                if(value === 'λ') rules.rightSide.push(final);\n                else rules.rightSide.push(value + final);\n            };\n        };\n        console.log(grammar);\n        for(let i=0 ; i<nodes.length ; i++){\n            let initial = nodes[i].id;\n            let type = nodes[i].type.find(row => row === 'final');\n            if(type){ //Se é final\n                let rules = grammar.find(row => row.leftSide === initial);\n\n                if(!rules) //Se não tem\n                    grammar.push({leftSide: initial, rightSide: ['λ']});\n                else //Se tem\n                    rules.rightSide.push('λ');\n            }\n        }\n        for(let i=0 ; i<nodes.length ; i++){\n            let initial = nodes[i].id;\n            let type = nodes[i].type.find(row => row === 'initial');\n\n            if(type){\n                let rules = grammar.find(row => row.leftSide === initial); //Verificando se existe regra com aquele simbolo\n                grammar = grammar.filter(item => item !== rules);\n                grammar.unshift(rules);\n            };\n        };\n        for(let rule of grammar[0].rightSide){\n            if(matchD(str, rule, grammar)){\n                return true;\n            };\n        }\n        return false;\n    }\n\n    const matchD = (str, rule, arr) => {\n        console.log('Rule: ', rule);\n        if(rule.length - 1 > str.length) return false;\n    \n        const nextRule = rule[rule.length - 1];\n        console.log('  Next rule: ', nextRule);\n    \n        //Verificando caractere vazio\n        if(nextRule === 'λ' && (rule.slice(0, rule.length - 1) === str && rule.slice(0, rule.length - 1).length === str.length)) return true;\n        \n        if(nextRule === nextRule.toLowerCase()) return rule === str;\n        \n        const rules = arr.find(row => row.leftSide === nextRule);\n        console.log('  Rules: ', rules.rightSide);\n    \n        if(!rules) return false;\n        for(let r of rules.rightSide)\n        {\n            if(matchD(str, rule.replace(nextRule, r), arr)){\n                return true;\n            }\n        }\n    };\n    \n    return (\n        <div style={{ height: '100vh' }}>\n            <div style={{ height: '20%', borderBottom: '3px solid black' ,display: 'flex', justifyContent: 'space-between', padding: '0 2.5% 0 2.5%', alignItems: 'center' }}>\n                <div>\n                    <Button\n                        variant='contained'\n                        color='default'\n                        onClick={() => setNodes([ ...nodes, { id: `q${parseInt(nodes[nodes.length - 1].id[1]) + 1}` }])}\n                    >Adicionar nó</Button>\n                </div>\n                <div style={{ display: 'flex', height: '90%' }}>\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n                        <input\n                            placeholder={'Nó inicial:'}\n                            style={styles.input}\n                            value={transitionInput.source}\n                            onChange={e => setTransitionInput({ ...transitionInput, source: e.target.value })}\n                        />\n                        <input\n                            placeholder={'Nó final:'}\n                            style={styles.input}\n                            value={transitionInput.target}\n                            onChange={e => setTransitionInput({ ...transitionInput, target: e.target.value })}\n                        />\n                        <input\n                            placeholder={'Estado:'}\n                            style={styles.input}\n                            value={transitionInput.label}\n                            onChange={e => setTransitionInput({ ...transitionInput, label: e.target.value })}\n                        />\n                    </div>\n                    <div style={{ paddingLeft: '10px', display: 'flex', alignItems: 'center' }}>\n                        <Button\n                            variant='contained'\n                            color='default'\n                            onClick={() => {\n                                const tr = transitions.find(t => t.source === transitionInput.source && t.target === transitionInput.target);\n                                if(tr){\n                                    if(tr.label !== transitionInput.label){\n                                        tr.label = transitionInput.label\n                                        setTransitions([ ...transitions.filter(t => t.source !== tr.source || t.target !== tr.target), tr]);\n                                    }\n                                } else setTransitions([ ...transitions, transitionInput ]);\n                                setTransitionInput({ source: '', target: '', label: 'λ' });\n                            }}\n                        >Adicionar transição</Button>\n                    </div>\n                </div>\n                <div>\n                    <Button\n                        variant='contained'\n                        color={deleteMode ? 'secondary' : 'default'}\n                        onClick={() => setDeleteMode(!deleteMode)}\n                    >\n                        <Delete />\n                    </Button>\n                </div>\n            </div>\n            <div style={{ height: '80%', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <div style={{ width: '20%', height: '100%', display: 'flex', alignItems: 'center' }}>\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                        {renderInputs()}\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <Button onClick={() => {\n                                if(inputs < 10) setInputs(inputs + 2);\n                            }}>\n                                <AddOutlinedIcon />\n                            </Button>\n                            <Button onClick={() => {\n                                if(inputs > 0) setInputs(inputs - 1);\n                            }}>\n                                <RemoveOutlinedIcon />\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n                <Graph \n                    id='graph-id'\n                    data={{\n                        nodes: nodes,\n                        links: transitions\n                    }}\n                    config={myConfig}\n                    onClickNode={onClickNode}\n                    onClickLink={onClickLink}\n                />\n            </div>\n        </div>\n    )\n}\n\n\nconst styles = {\n    input: {\n        borderWidth: \"3px\", \n        borderColor: \"black\",\n        borderStyle: \"solid\",\n        borderRadius: \"5px\",\n        outline: \"0\",\n        fontSize: \"20px\"\n    }\n};","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/pages/Home';\nimport Regex from './components/pages/Regex';\nimport Gramatica from './components/pages/Gramatica';\nimport AutoFin from './components/pages/AutoFin';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/gramatica' component={Gramatica} />\n        <Route path='/regex' component={Regex} />\n        <Route path='/autofin' component={AutoFin} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}